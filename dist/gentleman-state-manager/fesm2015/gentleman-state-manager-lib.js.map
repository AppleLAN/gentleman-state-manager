{"version":3,"file":"gentleman-state-manager-lib.js","sources":["ng://gentleman-state-manager-lib/lib/utils/functionalities.ts","ng://gentleman-state-manager-lib/lib/models/gentleman-state-object.ts","ng://gentleman-state-manager-lib/lib/services/gentleman-state.service.ts","ng://gentleman-state-manager-lib/lib/gentleman-state-manager.module.ts","ng://gentleman-state-manager-lib/public-api.ts","ng://gentleman-state-manager-lib/gentleman-state-manager-lib.ts"],"sourcesContent":["/**\n * @desc checks if the condition is met and returns its value\n * @param condition - the condition to check\n * @param errorMessage - the error message to be shown if the condition is not met\n * @return any\n */\nexport function checkIfConditionMet(condition: () => any, errorMessage: string): any {\n  const conditionMet = condition();\n  if (!conditionMet) {\n    console.error(errorMessage);\n    throw Error(errorMessage);\n  }\n  return conditionMet;\n}\n","import {BehaviorSubject, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {StateProperties, TypeWithKey} from './public-api';\nimport {checkIfConditionMet} from '../utils/public-api';\n\nexport class GentlemanStateObject<T extends TypeWithKey<any>> {\n  private state: T;\n  private stateProperties: StateProperties = {};\n  readonly observableSubject: BehaviorSubject<T>;\n\n  constructor(state: T, stateProperties: StateProperties) {\n    this.state = state;\n    this.stateProperties = stateProperties;\n    this.observableSubject = new BehaviorSubject(state);\n  }\n\n  /**\n   * @desc returns the observable that contains the state for async operations - it listens for changes\n   * @return Observable\n   */\n  getObservable(): Observable<T> {\n    return this.observableSubject.asObservable();\n  }\n\n  /**\n   * @desc returns the state properties object\n   * @return StateProperties\n   */\n  getStateProperties(): StateProperties {\n    return this.stateProperties;\n  }\n\n  /**\n   * @desc unsubscribes from the observable\n   * @return void\n   */\n  unsubscribe(): void {\n    this.observableSubject.unsubscribe();\n  }\n\n  /**\n   * @desc returns the value of the state at the time of the call\n   * @return any\n   */\n  getStateSnapshot(): T {\n    return { ...this.state };\n  }\n\n  /**\n   * @desc returns the value of a property of the state at the time of the call\n   * @param property - the name of the requested property\n   * @return any\n   */\n  getPropertyFromState(property: string): any {\n    return this.state[property];\n  }\n\n  /**\n   * @desc returns the value of a property of the state for async operations - it listens for changes\n   * @param property - the name of the requested property\n   * @return Observable\n   */\n  getPropertyFromObservable(property: string): Observable<any> {\n    return this.getObservable().pipe(map(s => this.checkIfPropertyExists(s, property)));\n  }\n\n  /**\n   * @desc sets the value for a certain property inside the state, triggers an async event\n   * @param value - the value for the requested property\n   * @param property - the name of the requested property\n   * @param emit - if true it will trigger an async event\n   * @return void\n   */\n  setObservableValues(value: T, property: string | null = null, emit = true): void {\n    this.setStateValues(value, property);\n    if (emit) {\n      this.observableSubject.next(this.state);\n    }\n  }\n\n  /**\n   * @desc sets the value for a certain property inside the state, doesn't triggers an async event\n   * @param value - the value for the requested property\n   * @param property - the name of the requested property, if no property it will try to patch the values into the state\n   * @return void\n   */\n  setStateValues(value: T, property: string | null): void {\n    if (property && this.checkIfPropertyExists(this.state, property)) {\n      (this.state as TypeWithKey<any>)[property] = value;\n    } else {\n      this.state = {\n        ...this.state,\n        ...value\n      };\n    }\n  }\n\n  /**\n   * @desc resets the state\n   * @return void\n   */\n  resetState(): void {\n    (this.state as TypeWithKey<any>) = {};\n  }\n\n  /**\n   * @desc checks if the selected property exists inside the state\n   * @param state - the state of the observable, the object that represents what the observable is going to contain\n   * @param property - the selected property\n   * @return any\n   */\n  private checkIfPropertyExists(state: T, property: string): any {\n    const condition = () => {\n      const propertyValue = state[property];\n      return propertyValue || propertyValue !== undefined;\n    };\n    return checkIfConditionMet(() => condition(), 'Selected property not found ! check if the key is correct and exists');\n  }\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {GentlemanStateObject, ObserverArrayItem, StateProperties} from '../models/public-api';\nimport {SourceOfTruth, SourceOfTruthInitiate} from '../models/source-of-truth';\nimport {checkIfConditionMet} from '../utils/public-api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GentlemanStateService {\n  private observerArray: SourceOfTruth = [];\n\n  constructor(@Inject('sourceOfTruthKeys') sourceOfTruthKeys: SourceOfTruthInitiate[]) {\n    sourceOfTruthKeys.forEach(k => {\n      const {key, state, stateProperties} = k;\n      this.createObservable(key, state, stateProperties);\n    });\n  }\n\n  /**\n   * @desc it checks if the searched object exists, if not it throws an errors and stops the execution.\n   * @param observableArrayItem - ObserverArrayItem | undefined\n   * @return ObserverArrayItem\n   */\n  private static checkIfFound(observableArrayItem: ObserverArrayItem<any> | undefined): ObserverArrayItem<any> {\n    const condition = () => {\n      return observableArrayItem;\n    };\n    return checkIfConditionMet(() => condition(), 'Observable item not found ! check if the key is correct and exists');\n  }\n\n  /**\n   * @desc it creates and observable and adds it to the observable array.\n   * @param key - the key to be used to represent the observable item inside the array\n   * @param state - the state of the observable, the object that represents what the observable is going to contain\n   * @param stateProperties - the properties of the state\n   * @return void\n   */\n  createObservable(key: string, state: any, stateProperties: StateProperties): void {\n    const observable = new GentlemanStateObject(state, stateProperties);\n    this.observerArray.push({key, observable});\n  }\n\n  /**\n   * @desc it returns the selected observable using the provided key.\n   * @param key - the key to be used to represent the observable item inside the array\n   * @return ObserverArrayItem\n   */\n  getObservable(key: string): GentlemanStateObject<any> {\n    const observableArrayItem = GentlemanStateService.checkIfFound(this.observerArray.find(obs => obs.key === key));\n    return observableArrayItem?.observable;\n  }\n\n  /**\n   * @desc it emits a new value into the selected observable using the provided key.\n   * @param key - the key to be used to represent the observable item inside the array\n   * @param data - the data to be emitted inside the selected observable\n   * @return void\n   */\n  emitValue(key: string, data: any): void {\n    const observableArrayItem = GentlemanStateService.checkIfFound(this.observerArray.find(obs => obs.key === key));\n    observableArrayItem?.observable.setObservableValues(data);\n  }\n\n  /**\n   * @desc it destroys an object from the observable array.\n   * @param key - the key to be used to represent the observable item inside the array\n   * @return void\n   */\n  destroyObservable(key: string): void {\n    const selectedObservable = GentlemanStateService.checkIfFound(this.observerArray.find(obs => obs.key === key));\n    selectedObservable?.observable.unsubscribe();\n    this.observerArray = this.observerArray.filter(obs => obs.key !== key);\n  }\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {SourceOfTruthInitiate} from './models/source-of-truth';\nimport {GentlemanStateService} from './services/public-api';\n\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: []\n})\nexport class GentlemanStateManagerModule {\n  static forRoot(sourceOfTruthKeys: SourceOfTruthInitiate[]): ModuleWithProviders<GentlemanStateManagerModule> {\n    return {\n      ngModule: GentlemanStateManagerModule,\n      providers: [GentlemanStateService, {provide: 'sourceOfTruthKeys', useValue: sourceOfTruthKeys}]\n    };\n  }\n}\n","/*\n * Public API Surface of gentleman-state-manager\n */\n\nexport * from './lib/public-api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}