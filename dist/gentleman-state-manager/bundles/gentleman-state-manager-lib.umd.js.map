{"version":3,"file":"gentleman-state-manager-lib.umd.js","sources":["../../../projects/gentleman-state-manager/src/lib/utils/functionalities.ts","../../../projects/gentleman-state-manager/src/lib/models/gentleman-state-object.ts","../../../projects/gentleman-state-manager/src/lib/services/gentleman-state.service.ts","../../../projects/gentleman-state-manager/src/lib/gentleman-state-manager.module.ts","../../../projects/gentleman-state-manager/src/public-api.ts","../../../projects/gentleman-state-manager/src/gentleman-state-manager-lib.ts"],"sourcesContent":["import {Condition} from '../models/utils';\r\n\r\n/**\r\n * @desc checks if the condition is met and returns its value\r\n * @param condition - the condition to check\r\n * @param errorMessage - the error message to be shown if the condition is not met\r\n * @return any\r\n */\r\n\r\nexport function checkIfConditionMet(condition: () => Condition, errorMessage: string): any {\r\n  const conditionMet = condition();\r\n  if (!conditionMet.met) {\r\n    console.error(errorMessage);\r\n    throw Error(errorMessage);\r\n  }\r\n  return conditionMet.value;\r\n}\r\n","import { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { checkIfConditionMet } from '../utils/public-api';\r\nimport { StateProperties, TypeWithKey } from './public-api';\r\n\r\nexport class GentlemanStateObject {\r\n  private state: any;\r\n  private stateProperties: StateProperties = {};\r\n  readonly observableSubject: BehaviorSubject<any>;\r\n\r\n  constructor(state: any, stateProperties: StateProperties) {\r\n    this.state = state;\r\n    this.stateProperties = stateProperties;\r\n    this.observableSubject = new BehaviorSubject(state);\r\n  }\r\n\r\n  /**\r\n   * @desc returns the observable that contains the state for async operations - it listens for changes\r\n   * @return Observable\r\n   */\r\n  getObservable(): Observable<any> {\r\n    return this.observableSubject.asObservable();\r\n  }\r\n\r\n  /**\r\n   * @desc returns the state properties object\r\n   * @return StateProperties\r\n   */\r\n  getStateProperties(): StateProperties {\r\n    return this.stateProperties;\r\n  }\r\n\r\n  /**\r\n   * @desc unsubscribes from the observable\r\n   * @return void\r\n   */\r\n  unsubscribe(): void {\r\n    this.observableSubject.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * @desc returns the value of the state at the time of the call\r\n   * @return any\r\n   */\r\n  getStateSnapshot(): any {\r\n    return { ...this.state };\r\n  }\r\n\r\n  /**\r\n   * @desc returns the value of a property of the state at the time of the call\r\n   * @param property - the name of the requested property\r\n   * @return any\r\n   */\r\n  getPropertyFromState(property: string): any {\r\n    return this.state[property];\r\n  }\r\n\r\n  /**\r\n   * @desc returns the value of a property of the state for async operations - it listens for changes\r\n   * @param property - the name of the requested property\r\n   * @return Observable\r\n   */\r\n  getPropertyFromObservable(property: string): Observable<any> {\r\n    return this.getObservable().pipe(map((s) => this.checkIfPropertyExists(s, property)));\r\n  }\r\n\r\n  /**\r\n   * @desc sets the value for a certain property inside the state, triggers an async event\r\n   * @param value - the value for the requested property\r\n   * @param property - the name of the requested property\r\n   * @param emit - if true it will trigger an async event\r\n   * @return void\r\n   */\r\n  setObservableValues(value: any, property: string | null = null, emit = true): void {\r\n    this.setStateValues(value, property);\r\n    if (emit) {\r\n      this.observableSubject.next(this.state);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc sets the value for a certain property inside the state, doesn't triggers an async event\r\n   * @param value - the value for the requested property\r\n   * @param property - the name of the requested property, if no property it will try to patch the values into the state\r\n   * @return void\r\n   */\r\n  setStateValues(value: any, property: string | null): void {\r\n    if (property && this.checkIfPropertyExists(this.state, property) !== undefined) {\r\n      (this.state as TypeWithKey<any>)[property] = value;\r\n    } else {\r\n      this.state = {\r\n        ...this.state,\r\n        ...value,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc resets the state\r\n   * @return void\r\n   */\r\n  resetState(): void {\r\n    (this.state as TypeWithKey<any>) = {};\r\n  }\r\n\r\n  /**\r\n   * @desc checks if the selected property exists inside the state\r\n   * @param state - the state of the observable, the object that represents what the observable is going to contain\r\n   * @param property - the selected property\r\n   * @return any\r\n   */\r\n  private checkIfPropertyExists(state: any, property: string): any {\r\n    const condition = () => {\r\n      return { met: state.hasOwnProperty(property), value: state[property] };\r\n    };\r\n    return checkIfConditionMet(() => condition(), 'Selected property not found ! check if the key is correct and exists');\r\n  }\r\n}\r\n","import { Inject, Injectable } from \"@angular/core\";\r\nimport { GentlemanStateObject, StateProperties } from \"../models/public-api\";\r\nimport { SourceOfTruth, SourceOfTruthInitiate } from \"../models/source-of-truth\";\r\nimport { checkIfConditionMet } from \"../utils/public-api\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class GentlemanStateService {\r\n  private observerArray: SourceOfTruth = new Map();\r\n\r\n  constructor(@Inject(\"sourceOfTruthKeys\") sourceOfTruthKeys: SourceOfTruthInitiate[]) {\r\n    sourceOfTruthKeys.forEach((k) => {\r\n      const { state, stateProperties } = k;\r\n      this.createObservable(k.key, state, stateProperties);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @desc it checks if the searched object exists, if not it throws an errors and stops the execution.\r\n   * @param gentlemanObject - GentlemanStateObject | undefined\r\n   * @return GentlemanStateObject\r\n   */\r\n  private static checkIfFound(gentlemanObject: GentlemanStateObject | undefined): GentlemanStateObject {\r\n    const condition = () => {\r\n      return { met: !!gentlemanObject, value: gentlemanObject };\r\n    };\r\n    return checkIfConditionMet(() => condition(), \"Observable item not found ! check if the key is correct and exists\");\r\n  }\r\n\r\n  /**\r\n   * @desc it creates and observable and adds it to the observable array.\r\n   * @param key - the key to be used to represent the observable item inside the array\r\n   * @param state - the state of the observable, the object that represents what the observable is going to contain\r\n   * @param stateProperties - the properties of the state\r\n   * @return void\r\n   */\r\n  createObservable(key: string, state: any, stateProperties: StateProperties): void {\r\n    const found = this.observerArray.has(key);\r\n    if (found) {\r\n      console.log(`the key : ${key}, already exists as an entity so it will be ignored`);\r\n    } else {\r\n      const gentlemanObject = new GentlemanStateObject(state, stateProperties);\r\n      this.observerArray.set(key, gentlemanObject);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc it returns the selected observable using the provided key.\r\n   * @param key - the key to be used to represent the observable item inside the array\r\n   * @return GentlemanStateObject\r\n   */\r\n  getEntity(key: string): GentlemanStateObject {\r\n    const observableArrayItem = GentlemanStateService.checkIfFound(this.observerArray.get(key));\r\n    return observableArrayItem;\r\n  }\r\n\r\n  /**\r\n   * @desc it emits a new value into the selected observable using the provided key.\r\n   * @param key - the key to be used to represent the observable item inside the array\r\n   * @param data - the data to be emitted inside the selected observable\r\n   * @return void\r\n   */\r\n  emitValue(key: string, data: any): void {\r\n    const observableArrayItem = GentlemanStateService.checkIfFound(this.observerArray.get(key));\r\n    observableArrayItem.setObservableValues(data);\r\n  }\r\n\r\n  /**\r\n   * @desc it destroys an object from the observable array.\r\n   * @param key - the key to be used to represent the observable item inside the array\r\n   * @return void\r\n   */\r\n  destroyObservable(key: string): void {\r\n    const selectedObservable = GentlemanStateService.checkIfFound(this.observerArray.get(key));\r\n    selectedObservable.unsubscribe();\r\n    this.observerArray.delete(key);\r\n  }\r\n}\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {SourceOfTruthInitiate} from './models/source-of-truth';\r\nimport {GentlemanStateService} from './services/public-api';\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [],\r\n  exports: []\r\n})\r\nexport class GentlemanStateManagerModule {\r\n  static forRoot(sourceOfTruthKeys: SourceOfTruthInitiate[]): ModuleWithProviders<GentlemanStateManagerModule> {\r\n    return {\r\n      ngModule: GentlemanStateManagerModule,\r\n      providers: [GentlemanStateService, {provide: 'sourceOfTruthKeys', useValue: sourceOfTruthKeys}]\r\n    };\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of gentleman-state-manager\r\n */\r\n\r\nexport * from './lib/public-api';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["BehaviorSubject","map","Injectable","Inject","NgModule"],"mappings":"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"}