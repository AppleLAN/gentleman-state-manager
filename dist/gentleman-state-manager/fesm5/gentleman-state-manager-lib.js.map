{"version":3,"file":"gentleman-state-manager-lib.js","sources":["ng://gentleman-state-manager-lib/lib/utils/functionalities.ts","ng://gentleman-state-manager-lib/lib/models/gentleman-state-object.ts","ng://gentleman-state-manager-lib/lib/services/gentleman-state.service.ts","ng://gentleman-state-manager-lib/lib/gentleman-state-manager.module.ts","ng://gentleman-state-manager-lib/public-api.ts","ng://gentleman-state-manager-lib/gentleman-state-manager-lib.ts"],"sourcesContent":["import {Condition} from '../models/utils';\r\n\r\n/**\r\n * @desc checks if the condition is met and returns its value\r\n * @param condition - the condition to check\r\n * @param errorMessage - the error message to be shown if the condition is not met\r\n * @return any\r\n */\r\n\r\nexport function checkIfConditionMet(condition: () => Condition, errorMessage: string): any {\r\n  const conditionMet = condition();\r\n  if (!conditionMet.met) {\r\n    console.error(errorMessage);\r\n    throw Error(errorMessage);\r\n  }\r\n  return conditionMet.value;\r\n}\r\n","import { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { checkIfConditionMet } from '../utils/public-api';\r\nimport { StateProperties, TypeWithKey } from './public-api';\r\n\r\nexport class GentlemanStateObject<T extends TypeWithKey<any>> {\r\n  private state: T;\r\n  private stateProperties: StateProperties = {};\r\n  readonly observableSubject: BehaviorSubject<T>;\r\n\r\n  constructor(state: T, stateProperties: StateProperties) {\r\n    this.state = state;\r\n    this.stateProperties = stateProperties;\r\n    this.observableSubject = new BehaviorSubject(state);\r\n  }\r\n\r\n  /**\r\n   * @desc returns the observable that contains the state for async operations - it listens for changes\r\n   * @return Observable\r\n   */\r\n  getObservable(): Observable<T> {\r\n    return this.observableSubject.asObservable();\r\n  }\r\n\r\n  /**\r\n   * @desc returns the state properties object\r\n   * @return StateProperties\r\n   */\r\n  getStateProperties(): StateProperties {\r\n    return this.stateProperties;\r\n  }\r\n\r\n  /**\r\n   * @desc unsubscribes from the observable\r\n   * @return void\r\n   */\r\n  unsubscribe(): void {\r\n    this.observableSubject.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * @desc returns the value of the state at the time of the call\r\n   * @return any\r\n   */\r\n  getStateSnapshot(): T {\r\n    return { ...this.state };\r\n  }\r\n\r\n  /**\r\n   * @desc returns the value of a property of the state at the time of the call\r\n   * @param property - the name of the requested property\r\n   * @return any\r\n   */\r\n  getPropertyFromState(property: string): any {\r\n    return this.state[property];\r\n  }\r\n\r\n  /**\r\n   * @desc returns the value of a property of the state for async operations - it listens for changes\r\n   * @param property - the name of the requested property\r\n   * @return Observable\r\n   */\r\n  getPropertyFromObservable(property: string): Observable<any> {\r\n    return this.getObservable().pipe(map((s) => this.checkIfPropertyExists(s, property)));\r\n  }\r\n\r\n  /**\r\n   * @desc sets the value for a certain property inside the state, triggers an async event\r\n   * @param value - the value for the requested property\r\n   * @param property - the name of the requested property\r\n   * @param emit - if true it will trigger an async event\r\n   * @return void\r\n   */\r\n  setObservableValues(value: T, property: string | null = null, emit = true): void {\r\n    this.setStateValues(value, property);\r\n    if (emit) {\r\n      this.observableSubject.next(this.state);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc sets the value for a certain property inside the state, doesn't triggers an async event\r\n   * @param value - the value for the requested property\r\n   * @param property - the name of the requested property, if no property it will try to patch the values into the state\r\n   * @return void\r\n   */\r\n  setStateValues(value: T, property: string | null): void {\r\n    if (property && this.checkIfPropertyExists(this.state, property) !== undefined) {\r\n      (this.state as TypeWithKey<any>)[property] = value;\r\n    } else {\r\n      this.state = {\r\n        ...this.state,\r\n        ...value,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc resets the state\r\n   * @return void\r\n   */\r\n  resetState(): void {\r\n    (this.state as TypeWithKey<any>) = {};\r\n  }\r\n\r\n  /**\r\n   * @desc checks if the selected property exists inside the state\r\n   * @param state - the state of the observable, the object that represents what the observable is going to contain\r\n   * @param property - the selected property\r\n   * @return any\r\n   */\r\n  private checkIfPropertyExists(state: T, property: string): any {\r\n    const condition = () => {\r\n      return { met: state.hasOwnProperty(property), value: state[property] };\r\n    };\r\n    return checkIfConditionMet(() => condition(), 'Selected property not found ! check if the key is correct and exists');\r\n  }\r\n}\r\n","import { Inject, Injectable } from \"@angular/core\";\r\nimport { GentlemanStateObject, ObserverArrayItem, StateProperties } from \"../models/public-api\";\r\nimport { SourceOfTruth, SourceOfTruthInitiate } from \"../models/source-of-truth\";\r\nimport { checkIfConditionMet } from \"../utils/public-api\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class GentlemanStateService {\r\n  private observerArray: SourceOfTruth = [];\r\n\r\n  constructor(@Inject(\"sourceOfTruthKeys\") sourceOfTruthKeys: SourceOfTruthInitiate[]) {\r\n    sourceOfTruthKeys.forEach((k) => {\r\n      const { key, state, stateProperties } = k;\r\n      this.createObservable(key, state, stateProperties);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @desc it checks if the searched object exists, if not it throws an errors and stops the execution.\r\n   * @param observableArrayItem - ObserverArrayItem | undefined\r\n   * @return ObserverArrayItem\r\n   */\r\n  private static checkIfFound(observableArrayItem: ObserverArrayItem<any> | undefined): ObserverArrayItem<any> {\r\n    const condition = () => {\r\n      return { met: !!observableArrayItem, value: observableArrayItem };\r\n    };\r\n    return checkIfConditionMet(() => condition(), \"Observable item not found ! check if the key is correct and exists\");\r\n  }\r\n\r\n  /**\r\n   * @desc it creates and observable and adds it to the observable array.\r\n   * @param key - the key to be used to represent the observable item inside the array\r\n   * @param state - the state of the observable, the object that represents what the observable is going to contain\r\n   * @param stateProperties - the properties of the state\r\n   * @return void\r\n   */\r\n  createObservable(key: string, state: any, stateProperties: StateProperties): void {\r\n    const found = this.observerArray.find((elem) => elem.key === key);\r\n    if (found) {\r\n      console.log(`the key : ${key}, already exists as an entity so it will be ignored`)\r\n    } else {\r\n      const observable = new GentlemanStateObject(state, stateProperties);\r\n      this.observerArray.push({ key, observable });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc it returns the selected observable using the provided key.\r\n   * @param key - the key to be used to represent the observable item inside the array\r\n   * @return ObserverArrayItem\r\n   */\r\n  getEntity(key: string): GentlemanStateObject<any> {\r\n    const observableArrayItem = GentlemanStateService.checkIfFound(this.observerArray.find((obs) => obs.key === key));\r\n    return observableArrayItem?.observable;\r\n  }\r\n\r\n  /**\r\n   * @desc it emits a new value into the selected observable using the provided key.\r\n   * @param key - the key to be used to represent the observable item inside the array\r\n   * @param data - the data to be emitted inside the selected observable\r\n   * @return void\r\n   */\r\n  emitValue(key: string, data: any): void {\r\n    const observableArrayItem = GentlemanStateService.checkIfFound(this.observerArray.find((obs) => obs.key === key));\r\n    observableArrayItem?.observable.setObservableValues(data);\r\n  }\r\n\r\n  /**\r\n   * @desc it destroys an object from the observable array.\r\n   * @param key - the key to be used to represent the observable item inside the array\r\n   * @return void\r\n   */\r\n  destroyObservable(key: string): void {\r\n    const selectedObservable = GentlemanStateService.checkIfFound(this.observerArray.find((obs) => obs.key === key));\r\n    selectedObservable?.observable.unsubscribe();\r\n    this.observerArray = this.observerArray.filter((obs) => obs.key !== key);\r\n  }\r\n}\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {SourceOfTruthInitiate} from './models/source-of-truth';\r\nimport {GentlemanStateService} from './services/public-api';\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [],\r\n  exports: []\r\n})\r\nexport class GentlemanStateManagerModule {\r\n  static forRoot(sourceOfTruthKeys: SourceOfTruthInitiate[]): ModuleWithProviders<GentlemanStateManagerModule> {\r\n    return {\r\n      ngModule: GentlemanStateManagerModule,\r\n      providers: [GentlemanStateService, {provide: 'sourceOfTruthKeys', useValue: sourceOfTruthKeys}]\r\n    };\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of gentleman-state-manager\r\n */\r\n\r\nexport * from './lib/public-api';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}